; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "IsAppRunning"
#define MyAppVersion "1.0"
#define MyAppPublisher "jet"
#define MyAppURL "http://www.example.com/"
#define MyAppExeName "IsAppRunning.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
;AppId={{E3928140-5441-4974-BE29-4EA1198A07F2}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
CreateAppDir=no
OutputBaseFilename={#MyAppName}
Compression=none
SolidCompression=no
DisableWelcomePage=true
DisableFinishedPage=true
DisableReadyPage=true
CreateUninstallRegKey=no
Uninstallable=no
PrivilegesRequired=lowest
;ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[code]
var
   i, j: Integer;
   nom : String;
   // tabkleau des processus a checker
   process: array of string;
  

// La fonction ci dessous se chargera de verifier si un processus 
// est en cours d'utilisation. Elle prend en paramètre le nom
// du processus
function IsAppRunning(const FileName : string): Boolean;
var
    FSWbemLocator: Variant;
    FWMIService   : Variant;
    FWbemObjectSet: Variant;
begin
    Result := false;
    FSWbemLocator := CreateOleObject('WBEMScripting.SWBEMLocator');
    FWMIService := FSWbemLocator.ConnectServer('', 'root\CIMV2', '', '');
    FWbemObjectSet := FWMIService.ExecQuery(Format('SELECT Name FROM Win32_Process Where Name="%s"',[FileName]));
    Result := (FWbemObjectSet.Count > 0);
    FWbemObjectSet := Unassigned;
    FWMIService := Unassigned;
    FSWbemLocator := Unassigned;
end;

// On verifiera par exemple pendant la phase d'initialisation du package
// avant de continuer que le processus est bien terminé. 
// "InitializeSetup" est apelée au début de l'installation et retourne
// "True" ou "False", si "True" le package peut continuer a s'installer
// sinon il quitte l'installation.
function InitializeSetup: Boolean;
begin
  process := [ 'WINWORD.EXE', 'EXCEL.EXE', 'POWERPNT.EXE', 'OUTLOOK.EXE' ];
  j :=0;

  // Pour chaque processus de la liste on verifie qu'il est bien fermé
  for i := 0 to GetArrayLength(process)-1 do
  begin
    while IsAppRunning(process[i]) do
    begin
        case process[i] of
            'WINWORD.EXE' : nom := 'Microsoft Word';
            'EXCEL.EXE'   : nom := 'Microsoft Excel';
            'POWERPNT.EXE': nom := 'Microsoft PowerPoint';
            'OUTLOOK.EXE' : nom := 'Microsoft Outlook';
        end;
        if MsgBox('Un composant MS Office est en cours d’utilisation. Veuillez fermer ' + nom +' et cliquer sur « Recommencer ».',  mbError, MB_RETRYCANCEL) = IDCANCEL then begin
           // On quitte l'installation
           Result := False;
           Exit;
        end;
    end;
  end;
  Result := True;
end;

//THE END
